{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/FilterParams.ts","utils/centuries.ts","types/Sex.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","types/SortParams.ts","types/Relative.tsx","utils/getRelatives.tsx","components/PeopleTable.tsx","api.ts","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","FilterParams","CENTURIES","Sex","PeopleFilters","setSearchParams","queryFilter","get","Query","sexFilter","selectedCenturies","getAll","Centuries","sex","Male","Female","type","placeholder","onChange","event","updatedSearchParams","query","target","map","century","includes","centuries","currentCentury","filter","length","Loader","PersonLink","person","useLocation","pathname","slug","name","SortParams","Relative","getRelatives","relative","Father","father","fatherName","Mother","mother","motherName","PeopleTable","people","slugId","useParams","currentSort","Sort","currentOrder","Order","handleSorting","selectedSort","sort","order","values","sortType","slice","toUpperCase","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","useEffect","fetchData","data","getPreparedPeople","useMemo","preparedPeople","find","women","man","queryNormalized","toLowerCase","trim","Math","ceil","Name","person1","person2","localeCompare","Born","Died","Error","reverse","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.6f924353.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage: React.FC = () => {\n  return <h1 className=\"title\">Home Page</h1>;\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum FilterParams {\n  Query = 'query',\n  Sex = 'sex',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","export const CENTURIES = ['16', '17', '18', '19', '20'];\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { FilterParams } from '../types/FilterParams';\nimport { CENTURIES } from '../utils/centuries';\nimport { Sex } from '../types/Sex';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryFilter = searchParams.get(FilterParams.Query) || '';\n  const sexFilter = searchParams.get(FilterParams.Sex) || '';\n  const selectedCenturies = searchParams.getAll(FilterParams.Centuries) || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedSearchParams = getSearchWith(searchParams, {\n      query: event.target.value || null,\n    });\n\n    setSearchParams(updatedSearchParams);\n  };\n\n  const handleCenturyChange = (currentCentury: string) => {\n    return selectedCenturies.includes(currentCentury)\n      ? selectedCenturies.filter((century) => century !== currentCentury)\n      : [...selectedCenturies, currentCentury];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sexFilter })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: Sex.Male }}\n          className={classNames({ 'is-active': sexFilter === Sex.Male })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: Sex.Female }}\n          className={classNames({ 'is-active': sexFilter === Sex.Female })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={queryFilter}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': selectedCenturies.includes(century),\n                })}\n                params={{ centuries: handleCenturyChange(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': !!selectedCenturies.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={classNames('button is-link is-fullwidth', {\n            'is-outlined': !!selectedCenturies.length\n              || sexFilter\n              || queryFilter,\n          })}\n          params={{ sex: null, centuries: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n\nexport default PeopleFilters;\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{ pathname: `../${person.slug}`, search }}\n      className={person.sex === 'f' ? 'has-text-danger' : ''}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export enum SortParams {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export enum Relative {\n  Mother = 'mother',\n  Father = 'father',\n}\n","import { ReactNode } from 'react';\nimport { Person } from '../types';\nimport { PersonLink } from '../components/PersonLink';\nimport { Relative } from '../types/Relative';\n\nexport const getRelatives = (\n  person: Person, relative: string,\n): ReactNode | string => {\n  if (relative === Relative.Father) {\n    if (person.father) {\n      return <PersonLink person={person.father} />;\n    }\n\n    if (person.fatherName) {\n      return person.fatherName;\n    }\n  }\n\n  if (relative === Relative.Mother) {\n    if (person.mother) {\n      return <PersonLink person={person.mother} />;\n    }\n\n    if (person.motherName) {\n      return person.motherName;\n    }\n  }\n\n  return '-';\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\nimport { SearchParams } from '../utils/searchHelper';\nimport { SortParams } from '../types/SortParams';\nimport { SearchLink } from './SearchLink';\nimport { FilterParams } from '../types/FilterParams';\nimport { getRelatives } from '../utils/getRelatives';\nimport { Relative } from '../types/Relative';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slugId } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const currentSort = searchParams.get(FilterParams.Sort) || '';\n  const currentOrder = searchParams.get(FilterParams.Order) || '';\n\n  const handleSorting = (selectedSort: SortParams): SearchParams => {\n    switch (true) {\n      case !currentSort || currentSort !== selectedSort:\n        return { sort: selectedSort, order: null };\n\n      case !currentOrder:\n        return { sort: selectedSort, order: 'desc' };\n\n      default:\n        return { sort: null, order: null };\n    }\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(SortParams).map((sortType) => (\n            <th key={sortType}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {sortType.slice(0, 1).toUpperCase() + sortType.slice(1)}\n                <SearchLink\n                  params={handleSorting(sortType)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': currentSort !== sortType,\n                      'fa-sort-up': currentSort === sortType && !currentOrder,\n                      'fa-sort-down': currentSort === sortType && currentOrder,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <tr\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': slugId === person.slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>{getRelatives(person, Relative.Mother)}</td>\n            <td>{getRelatives(person, Relative.Father)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { FilterParams } from '../types/FilterParams';\nimport { SortParams } from '../types/SortParams';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(FilterParams.Query) || '';\n  const sex = searchParams.get(FilterParams.Sex) || '';\n  const centuries = searchParams.getAll(FilterParams.Centuries) || [];\n  const sort = searchParams.get(FilterParams.Sort) || '';\n  const order = searchParams.get(FilterParams.Order) || '';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getPeople();\n\n        setPeople(data);\n      } catch (error) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const getPreparedPeople = useMemo(() => {\n    let preparedPeople = people.map((person) => {\n      const mother = people.find((women) => women.name === person.motherName);\n      const father = people.find((man) => man.name === person.fatherName);\n\n      return {\n        ...person,\n        mother,\n        father,\n      };\n    });\n\n    if (query) {\n      preparedPeople = preparedPeople.filter((person) => {\n        const queryNormalized = query.toLowerCase().trim();\n\n        return (\n          person.name.toLowerCase().includes(queryNormalized)\n          || person.fatherName\n            ?.toLowerCase().includes(queryNormalized)\n          || person.motherName\n            ?.toLowerCase().includes(queryNormalized)\n        );\n      });\n    }\n\n    if (sex) {\n      preparedPeople = preparedPeople.filter((person) => {\n        return person.sex === sex;\n      });\n    }\n\n    if (centuries.length) {\n      preparedPeople = preparedPeople.filter((person) => {\n        return centuries.find((century) => {\n          return Math.ceil(person.born / 100) === +century;\n        });\n      });\n    }\n\n    if (sort) {\n      switch (sort) {\n        case SortParams.Name:\n        case SortParams.Sex:\n          preparedPeople = [...preparedPeople].sort(\n            (person1, person2) => person1[sort].localeCompare(person2[sort]),\n          );\n          break;\n\n        case SortParams.Born:\n        case SortParams.Died:\n          preparedPeople = [...preparedPeople].sort(\n            (person1, person2) => +person1[sort] - +person2[sort],\n          );\n          break;\n\n        default:\n          throw new Error('Sorting went wrong...');\n      }\n    }\n\n    if (order) {\n      preparedPeople = preparedPeople.reverse();\n    }\n\n    return preparedPeople;\n  }, [people, query, sex, centuries, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              <div className=\"column is-7-tablet is-narrow-desktop\">\n                <PeopleFilters />\n              </div>\n\n              <div className=\"column\">\n                <div className=\"box table-container\">\n                  {hasError ? (\n                    <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n                  ) : (\n                    <>\n                      {!!people.length && !!getPreparedPeople.length && (\n                        <PeopleTable people={getPreparedPeople} />\n                      )}\n\n                      {!people.length && (\n                        <p data-cy=\"noPeopleMessage\">\n                          There are no people on the server\n                        </p>\n                      )}\n\n                      {!getPreparedPeople.length && (\n                        <p>\n                          There are no people\n                          matching the current search criteria\n                        </p>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage: React.FC = () => {\n  return <h1 className=\"title\">Page not found</h1>;\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n\n          <Route path=\"people\">\n            <Route path=\":slugId?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}